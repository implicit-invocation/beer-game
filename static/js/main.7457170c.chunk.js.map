{"version":3,"sources":["bottleUtil.js","debugBox2d.js","index.js"],"names":["drawBottle","b2Vec2","batch","tex","x","y","angle","scale","draw","createBottle","world","density","bodyDef","b2BodyDef","type","b2BodyType","b2_dynamicBody","position","Set","body","CreateBody","shape1","b2PolygonShape","SetAsBox","shape2","shape3","CreateFixture","a","canvas","document","getElementById","info","overlay","resizeCanvas","width","height","worldWidth","worldHeight","gl","getContext","loadTexture","bg","platformTex","circleCanTex","rectCanTex","bottleTex","b2World","createWhiteTex","createBatch","camera","createOrthoCamera","inputHandler","InputHandler","createRectCan","w","h","shape","createCircleCan","r","verts","i","v","SelfRotate","Math","PI","push","platform","b2_kinematicBody","createUnbalancePlatform","PLATFORM_WIDTH","PLATFORM_SPEED","PLATFORM_ACCELERATION","gameOver","circleCans","rectCans","bottles","platformSpeed","platformAcceleration","initGame","can","DestroyBody","length","bottle","SetAngle","restartGame","style","display","addEventListener","screenPos","Vector2","worldPos","DEVICE_PIXEL_RATIO","window","devicePixelRatio","set","unprojectVector2","e","which","clearColor","update","delta","clear","COLOR_BUFFER_BIT","GetPosition","max","min","SetAngularVelocity","Step","setProjection","combined","begin","PLATFORM_HEIGHT","GetAngle","circleCan","CIRCLE_CAN_RADIUS","rectCan","RECT_CAN_WIDTH","RECT_CAN_HEIGHT","end","game","createGameLoop","setInterval","innerHTML","round","getFps","init"],"mappings":"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","file":"static/js/main.7457170c.chunk.js","sourcesContent":["import { b2BodyDef, b2PolygonShape, b2Vec2, b2BodyType } from \"box2d.ts\";\n\nexport const BOTTLE_OFFSET_X = 0.75;\nexport const BOTTLE_OFFSET_Y = 2.3;\nexport const BOTTLE_DRAW_WIDTH = 1.5;\nexport const BOTTLE_DRAW_HEIGHT = 5.3;\n\nexport const drawBottle = (batch, tex, x, y, angle, scale) => {\n  batch.draw(\n    tex,\n    x - BOTTLE_OFFSET_X * scale,\n    y - BOTTLE_OFFSET_Y * scale,\n    BOTTLE_DRAW_WIDTH * scale,\n    BOTTLE_DRAW_HEIGHT * scale,\n    BOTTLE_OFFSET_X * scale,\n    BOTTLE_OFFSET_Y * scale,\n    angle\n  );\n};\n\nexport const createBottle = (world, x, y, scale = 1, density = 1) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x, y);\n\n  const body = world.CreateBody(bodyDef);\n  const shape1 = new b2PolygonShape();\n  shape1.SetAsBox(0.3 * scale, 0.3 * scale, new b2Vec2(0, -2 * scale));\n  const shape2 = new b2PolygonShape();\n  shape2.Set([\n    new b2Vec2(-0.3 * scale, -1.7 * scale),\n    new b2Vec2(0.3 * scale, -1.7 * scale),\n    new b2Vec2(0.75 * scale, 0.5 * scale),\n    new b2Vec2(-0.75 * scale, 0.5 * scale)\n  ]);\n  const shape3 = new b2PolygonShape();\n  shape3.SetAsBox(0.75 * scale, 1.2 * scale, new b2Vec2(0, 1.75 * scale));\n\n  body.CreateFixture(shape1, density);\n  body.CreateFixture(shape2, density);\n  body.CreateFixture(shape3, density);\n\n  return body;\n};\n","import { drawCircle, drawPolygon } from \"gdxjs\";\nimport { b2ShapeType, b2Vec2 } from \"box2d.ts\";\nconst tmp = [];\nconst worldPoint = new b2Vec2(0, 0);\n\nconst debugBox2d = (world, batch, whiteTex) => {\n  for (let body = world.GetBodyList(); body; body = body.GetNext()) {\n    const pos = body.GetPosition();\n    for (\n      let fixture = body.GetFixtureList();\n      fixture;\n      fixture = fixture.GetNext()\n    ) {\n      const shape = fixture.GetShape();\n      if (shape.GetType() === b2ShapeType.e_polygonShape) {\n        const vertices = shape.m_vertices;\n        tmp.length = 0;\n        for (let vertice of vertices) {\n          body.GetWorldPoint(vertice, worldPoint);\n          tmp.push(worldPoint.x, worldPoint.y);\n        }\n        drawPolygon(batch, whiteTex, tmp, 0.05, 0, 0, 0);\n      } else if (shape.GetType() === b2ShapeType.e_circleShape) {\n        drawCircle(\n          batch,\n          whiteTex,\n          pos.x,\n          pos.y,\n          shape.m_radius,\n          0.05,\n          10,\n          0,\n          0,\n          0\n        );\n      }\n    }\n  }\n};\n\nexport default debugBox2d;\n","import \"./index.css\";\n\nimport {\n  createGameLoop,\n  resizeCanvas,\n  createBatch,\n  createOrthoCamera,\n  InputHandler,\n  Vector2,\n  loadTexture\n} from \"gdxjs\";\nimport createWhiteTex from \"gl-white-texture\";\nimport {\n  b2World,\n  b2Vec2,\n  b2BodyDef,\n  b2BodyType,\n  b2PolygonShape\n} from \"box2d.ts\";\nimport debugBox2d from \"./debugBox2d\";\nimport { createBottle, drawBottle } from \"./bottleUtil\";\n\nconst init = async () => {\n  const canvas = document.getElementById(\"main\");\n  const info = document.getElementById(\"info\");\n  const overlay = document.getElementById(\"overlay\");\n  const [width, height] = resizeCanvas(canvas);\n  const [worldWidth, worldHeight] = [(10 / height) * width, 10];\n  const gl = canvas.getContext(\"webgl\");\n\n  const bg = await loadTexture(gl, \"./art/bg.jpg\");\n  const platformTex = await loadTexture(gl, \"./art/disk.png\");\n  const circleCanTex = await loadTexture(gl, \"./art/can-1.png\");\n  const rectCanTex = await loadTexture(gl, \"./art/can-2.png\");\n  const bottleTex = await loadTexture(gl, \"./art/bottle.png\");\n\n  const world = new b2World(new b2Vec2(0, 10));\n\n  const whiteTex = createWhiteTex(gl);\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(worldWidth, worldHeight, width, height);\n  const inputHandler = new InputHandler(canvas);\n\n  const createUnbalancePlatform = (world, x, y, w, h) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_kinematicBody;\n    bodyDef.position.Set(x, y);\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(w / 2, h / 2, new b2Vec2(0, 0), 0);\n    body.CreateFixture(shape, 1);\n    return body;\n  };\n\n  const createRectCan = (world, x, y, w, h, density = 1) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x, y);\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(w / 2, h / 2, new b2Vec2(0, 0), 0);\n    body.CreateFixture(shape, density);\n    return body;\n  };\n\n  const createCircleCan = (world, x, y, r) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x, y);\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    const verts = [];\n    for (let i = 0; i < 12; i++) {\n      const v = new b2Vec2(0, r);\n      v.SelfRotate((Math.PI / 6) * i);\n      verts.push(v);\n    }\n    shape.Set(verts, 12);\n    body.CreateFixture(shape, 1);\n    return body;\n  };\n\n  const PLATFORM_WIDTH = (worldWidth * 3) / 4;\n  const PLATFORM_HEIGHT = 0.2;\n  const platform = createUnbalancePlatform(\n    world,\n    worldWidth / 2,\n    (worldHeight * 2) / 3,\n    PLATFORM_WIDTH,\n    PLATFORM_HEIGHT\n  );\n  const PLATFORM_SPEED = Math.PI / 4;\n  const PLATFORM_ACCELERATION = Math.PI;\n\n  const RECT_CAN_HEIGHT = 1.2;\n  const RECT_CAN_WIDTH = 0.6;\n  const CIRCLE_CAN_RADIUS = 0.3;\n  const BOTTLE_SCALE = 0.4;\n\n  let gameOver = true;\n  const circleCans = [];\n  const rectCans = [];\n  const bottles = [];\n  let platformSpeed = 0;\n  let platformAcceleration = PLATFORM_ACCELERATION;\n\n  const initGame = () => {\n    gameOver = false;\n    platformSpeed = 0;\n    platformAcceleration = PLATFORM_ACCELERATION;\n    for (let can of circleCans) {\n      world.DestroyBody(can);\n    }\n    circleCans.length = 0;\n\n    for (let can of rectCans) {\n      world.DestroyBody(can);\n    }\n    rectCans.length = 0;\n\n    for (let bottle of bottles) {\n      world.DestroyBody(bottle);\n    }\n    bottles.length = 0;\n\n    platform.SetAngle(0);\n\n    circleCans.push(\n      createCircleCan(world, worldWidth / 2, worldHeight / 2, CIRCLE_CAN_RADIUS)\n    );\n\n    rectCans.push(\n      createRectCan(\n        world,\n        worldWidth / 3 + 0.1,\n        worldHeight / 2,\n        RECT_CAN_WIDTH,\n        RECT_CAN_HEIGHT,\n        3\n      )\n    );\n    rectCans.push(\n      createRectCan(\n        world,\n        worldWidth / 3 + 0.5,\n        worldHeight / 3,\n        RECT_CAN_WIDTH,\n        RECT_CAN_HEIGHT,\n        3\n      )\n    );\n    rectCans[1].SetAngle(Math.PI / 2);\n\n    bottles.push(\n      createBottle(\n        world,\n        (worldWidth * 2) / 3 - 0.1,\n        worldHeight / 2,\n        BOTTLE_SCALE,\n        3\n      )\n    );\n  };\n\n  const restartGame = () => {\n    initGame();\n    overlay.style.display = \"none\";\n  };\n\n  overlay.addEventListener(\"click\", () => {\n    restartGame();\n  });\n\n  initGame();\n\n  const screenPos = new Vector2(0, 0);\n  const worldPos = new Vector2(0, 0);\n  const DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;\n\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\n    x = x * DEVICE_PIXEL_RATIO;\n    y = y * DEVICE_PIXEL_RATIO;\n    screenPos.set(x, y);\n    camera.unprojectVector2(worldPos, screenPos);\n\n    if (worldPos.x < worldWidth / 2) {\n      platformAcceleration = -PLATFORM_ACCELERATION;\n    } else {\n      platformAcceleration = PLATFORM_ACCELERATION;\n    }\n  });\n\n  document.addEventListener(\"keydown\", e => {\n    if (e.which === 65) {\n      platformAcceleration = -PLATFORM_ACCELERATION;\n    } else if (e.which === 68) {\n      platformAcceleration = PLATFORM_ACCELERATION;\n    } else if (e.which === 82 && gameOver) {\n      restartGame();\n    }\n  });\n\n  gl.clearColor(0, 0, 0, 1);\n  const update = delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    if (!gameOver) {\n      for (let can of circleCans) {\n        if (can.GetPosition().y >= worldHeight) {\n          gameOver = true;\n          break;\n        }\n      }\n      for (let can of rectCans) {\n        if (can.GetPosition().y >= worldHeight) {\n          gameOver = true;\n          break;\n        }\n      }\n      for (let can of bottles) {\n        if (can.GetPosition().y >= worldHeight) {\n          gameOver = true;\n          break;\n        }\n      }\n      if (gameOver) {\n        overlay.style.display = \"flex\";\n      }\n    }\n\n    if (!gameOver) {\n      platformSpeed += platformAcceleration * delta;\n      platformSpeed = Math.max(platformSpeed, -PLATFORM_SPEED);\n      platformSpeed = Math.min(platformSpeed, PLATFORM_SPEED);\n      platform.SetAngularVelocity(platformSpeed);\n      world.Step(delta, 8, 3);\n    }\n\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.draw(bg, 0, 0, worldWidth, worldHeight);\n    batch.draw(\n      platformTex,\n      platform.GetPosition().x - PLATFORM_WIDTH / 2,\n      platform.GetPosition().y - PLATFORM_HEIGHT / 2,\n      PLATFORM_WIDTH,\n      PLATFORM_HEIGHT,\n      PLATFORM_WIDTH / 2,\n      PLATFORM_HEIGHT / 2,\n      platform.GetAngle()\n    );\n\n    for (let circleCan of circleCans) {\n      const position = circleCan.GetPosition();\n      batch.draw(\n        circleCanTex,\n        position.x - CIRCLE_CAN_RADIUS,\n        position.y - CIRCLE_CAN_RADIUS,\n        CIRCLE_CAN_RADIUS * 2,\n        CIRCLE_CAN_RADIUS * 2,\n        CIRCLE_CAN_RADIUS,\n        CIRCLE_CAN_RADIUS,\n        circleCan.GetAngle()\n      );\n    }\n    for (let rectCan of rectCans) {\n      const position = rectCan.GetPosition();\n      batch.draw(\n        rectCanTex,\n        position.x - RECT_CAN_WIDTH / 2,\n        position.y - RECT_CAN_HEIGHT / 2,\n        RECT_CAN_WIDTH,\n        RECT_CAN_HEIGHT,\n        RECT_CAN_WIDTH / 2,\n        RECT_CAN_HEIGHT / 2,\n        rectCan.GetAngle()\n      );\n    }\n    for (let bottle of bottles) {\n      drawBottle(\n        batch,\n        bottleTex,\n        bottle.GetPosition().x,\n        bottle.GetPosition().y,\n        bottle.GetAngle(),\n        BOTTLE_SCALE\n      );\n    }\n    // debugBox2d(world, batch, whiteTex);\n    batch.end();\n  };\n\n  const game = createGameLoop(update);\n  setInterval(\n    () => (info.innerHTML = `FPS: ${Math.round(game.getFps())}`),\n    1000\n  );\n};\n\ninit();\n"],"sourceRoot":""}